# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _convnet.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_convnet', [dirname(__file__)])
        except ImportError:
            import _convnet
            return _convnet
        if fp is not None:
            try:
                _mod = imp.load_module('_convnet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _convnet = swig_import_helper()
    del swig_import_helper
else:
    import _convnet
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


IS_MKL = _convnet.IS_MKL
class Matrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TANH = _convnet.Matrix_TANH
    RECIPROCAL = _convnet.Matrix_RECIPROCAL
    SQUARE = _convnet.Matrix_SQUARE
    ABS = _convnet.Matrix_ABS
    EXP = _convnet.Matrix_EXP
    LOG = _convnet.Matrix_LOG
    ZERO = _convnet.Matrix_ZERO
    ONE = _convnet.Matrix_ONE
    LOGISTIC1 = _convnet.Matrix_LOGISTIC1
    LOGISTIC2 = _convnet.Matrix_LOGISTIC2
    SIGN = _convnet.Matrix_SIGN
    def __init__(self, *args): 
        _convnet.Matrix_swiginit(self,_convnet.new_Matrix(*args))
    __swig_destroy__ = _convnet.delete_Matrix
Matrix.getCell = new_instancemethod(_convnet.Matrix_getCell,None,Matrix)
Matrix.__call__ = new_instancemethod(_convnet.Matrix___call__,None,Matrix)
Matrix.getData = new_instancemethod(_convnet.Matrix_getData,None,Matrix)
Matrix.isView = new_instancemethod(_convnet.Matrix_isView,None,Matrix)
Matrix.getNumRows = new_instancemethod(_convnet.Matrix_getNumRows,None,Matrix)
Matrix.getNumCols = new_instancemethod(_convnet.Matrix_getNumCols,None,Matrix)
Matrix.getNumDataBytes = new_instancemethod(_convnet.Matrix_getNumDataBytes,None,Matrix)
Matrix.getNumElements = new_instancemethod(_convnet.Matrix_getNumElements,None,Matrix)
Matrix.getLeadingDim = new_instancemethod(_convnet.Matrix_getLeadingDim,None,Matrix)
Matrix.getFollowingDim = new_instancemethod(_convnet.Matrix_getFollowingDim,None,Matrix)
Matrix.getBLASTrans = new_instancemethod(_convnet.Matrix_getBLASTrans,None,Matrix)
Matrix.isSameDims = new_instancemethod(_convnet.Matrix_isSameDims,None,Matrix)
Matrix.isTrans = new_instancemethod(_convnet.Matrix_isTrans,None,Matrix)
Matrix.setTrans = new_instancemethod(_convnet.Matrix_setTrans,None,Matrix)
Matrix.apply = new_instancemethod(_convnet.Matrix_apply,None,Matrix)
Matrix.subtractFromScalar = new_instancemethod(_convnet.Matrix_subtractFromScalar,None,Matrix)
Matrix.biggerThanScalar = new_instancemethod(_convnet.Matrix_biggerThanScalar,None,Matrix)
Matrix.smallerThanScalar = new_instancemethod(_convnet.Matrix_smallerThanScalar,None,Matrix)
Matrix.equalsScalar = new_instancemethod(_convnet.Matrix_equalsScalar,None,Matrix)
Matrix.biggerThan = new_instancemethod(_convnet.Matrix_biggerThan,None,Matrix)
Matrix.smallerThan = new_instancemethod(_convnet.Matrix_smallerThan,None,Matrix)
Matrix.minWith = new_instancemethod(_convnet.Matrix_minWith,None,Matrix)
Matrix.maxWith = new_instancemethod(_convnet.Matrix_maxWith,None,Matrix)
Matrix.equals = new_instancemethod(_convnet.Matrix_equals,None,Matrix)
Matrix.notEquals = new_instancemethod(_convnet.Matrix_notEquals,None,Matrix)
Matrix.add = new_instancemethod(_convnet.Matrix_add,None,Matrix)
Matrix.subtract = new_instancemethod(_convnet.Matrix_subtract,None,Matrix)
Matrix.addVector = new_instancemethod(_convnet.Matrix_addVector,None,Matrix)
Matrix.addScalar = new_instancemethod(_convnet.Matrix_addScalar,None,Matrix)
Matrix.maxWithScalar = new_instancemethod(_convnet.Matrix_maxWithScalar,None,Matrix)
Matrix.minWithScalar = new_instancemethod(_convnet.Matrix_minWithScalar,None,Matrix)
Matrix.eltWiseMultByVector = new_instancemethod(_convnet.Matrix_eltWiseMultByVector,None,Matrix)
Matrix.eltWiseDivideByVector = new_instancemethod(_convnet.Matrix_eltWiseDivideByVector,None,Matrix)
Matrix.resize = new_instancemethod(_convnet.Matrix_resize,None,Matrix)
Matrix.slice = new_instancemethod(_convnet.Matrix_slice,None,Matrix)
Matrix.sliceRows = new_instancemethod(_convnet.Matrix_sliceRows,None,Matrix)
Matrix.sliceCols = new_instancemethod(_convnet.Matrix_sliceCols,None,Matrix)
Matrix.rightMult = new_instancemethod(_convnet.Matrix_rightMult,None,Matrix)
Matrix.addProduct = new_instancemethod(_convnet.Matrix_addProduct,None,Matrix)
Matrix.eltWiseMult = new_instancemethod(_convnet.Matrix_eltWiseMult,None,Matrix)
Matrix.eltWiseDivide = new_instancemethod(_convnet.Matrix_eltWiseDivide,None,Matrix)
Matrix.transpose = new_instancemethod(_convnet.Matrix_transpose,None,Matrix)
Matrix.tile = new_instancemethod(_convnet.Matrix_tile,None,Matrix)
Matrix.copy = new_instancemethod(_convnet.Matrix_copy,None,Matrix)
Matrix.sum = new_instancemethod(_convnet.Matrix_sum,None,Matrix)
Matrix.max = new_instancemethod(_convnet.Matrix_max,None,Matrix)
Matrix.min = new_instancemethod(_convnet.Matrix_min,None,Matrix)
Matrix.norm = new_instancemethod(_convnet.Matrix_norm,None,Matrix)
Matrix.norm2 = new_instancemethod(_convnet.Matrix_norm2,None,Matrix)
Matrix.scale = new_instancemethod(_convnet.Matrix_scale,None,Matrix)
Matrix.reshape = new_instancemethod(_convnet.Matrix_reshape,None,Matrix)
Matrix.reshaped = new_instancemethod(_convnet.Matrix_reshaped,None,Matrix)
Matrix.printShape = new_instancemethod(_convnet.Matrix_printShape,None,Matrix)
Matrix.hasNan = new_instancemethod(_convnet.Matrix_hasNan,None,Matrix)
Matrix.hasInf = new_instancemethod(_convnet.Matrix_hasInf,None,Matrix)
Matrix.randomizeUniform = new_instancemethod(_convnet.Matrix_randomizeUniform,None,Matrix)
Matrix.randomizeNormal = new_instancemethod(_convnet.Matrix_randomizeNormal,None,Matrix)
Matrix._print = new_instancemethod(_convnet.Matrix__print,None,Matrix)
Matrix_swigregister = _convnet.Matrix_swigregister
Matrix_swigregister(Matrix)

class Thread(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_Thread
Thread.start = new_instancemethod(_convnet.Thread_start,None,Thread)
Thread.join = new_instancemethod(_convnet.Thread_join,None,Thread)
Thread.getThreadID = new_instancemethod(_convnet.Thread_getThreadID,None,Thread)
Thread_swigregister = _convnet.Thread_swigregister
Thread_swigregister(Thread)

class ScopedLock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ScopedLock_swiginit(self,_convnet.new_ScopedLock(*args))
    __swig_destroy__ = _convnet.delete_ScopedLock
ScopedLock_swigregister = _convnet.ScopedLock_swigregister
ScopedLock_swigregister(ScopedLock)

class FuncThread(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _runThread = staticmethod(_convnet.FuncThread__runThread)
    def __init__(self, *args): 
        _convnet.FuncThread_swiginit(self,_convnet.new_FuncThread(*args))
    __swig_destroy__ = _convnet.delete_FuncThread
FuncThread_swigregister = _convnet.FuncThread_swigregister
FuncThread_swigregister(FuncThread)

def FuncThread__runThread(*args):
  return _convnet.FuncThread__runThread(*args)
FuncThread__runThread = _convnet.FuncThread__runThread


def rdtsc():
  return _convnet.rdtsc()
rdtsc = _convnet.rdtsc

def breakpoint():
  return _convnet.breakpoint()
breakpoint = _convnet.breakpoint

def Now():
  return _convnet.Now()
Now = _convnet.Now

def Hostname():
  return _convnet.Hostname()
Hostname = _convnet.Hostname

def timevalFromDouble(*args):
  return _convnet.timevalFromDouble(*args)
timevalFromDouble = _convnet.timevalFromDouble

def timespecFromDouble(*args):
  return _convnet.timespecFromDouble(*args)
timespecFromDouble = _convnet.timespecFromDouble
class TimerBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    t_ = _swig_property(_convnet.TimerBlock_t__get, _convnet.TimerBlock_t__set)
    start_ = _swig_property(_convnet.TimerBlock_start__get, _convnet.TimerBlock_start__set)
    def __init__(self, *args): 
        _convnet.TimerBlock_swiginit(self,_convnet.new_TimerBlock(*args))
    __swig_destroy__ = _convnet.delete_TimerBlock
TimerBlock_swigregister = _convnet.TimerBlock_swigregister
TimerBlock_swigregister(TimerBlock)


def Sleep(*args):
  return _convnet.Sleep(*args)
Sleep = _convnet.Sleep
kLogDebug = _convnet.kLogDebug
kLogInfo = _convnet.kLogInfo
kLogWarn = _convnet.kLogWarn
kLogError = _convnet.kLogError
kLogFatal = _convnet.kLogFatal

def get_processor_frequency():
  return _convnet.get_processor_frequency()
get_processor_frequency = _convnet.get_processor_frequency

def logAtLevel(*args):
  return _convnet.logAtLevel(*args)
logAtLevel = _convnet.logAtLevel
RND_MULTIPLIERS_FILE = _convnet.RND_MULTIPLIERS_FILE
class NVMatrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.NVMatrix_swiginit(self,_convnet.new_NVMatrix(*args))
    __swig_destroy__ = _convnet.delete_NVMatrix
    initRandom = staticmethod(_convnet.NVMatrix_initRandom)
    getDeviceID = staticmethod(_convnet.NVMatrix_getDeviceID)
    isRndInitialized = staticmethod(_convnet.NVMatrix_isRndInitialized)
    getCurandState = staticmethod(_convnet.NVMatrix_getCurandState)
    destroyRandom = staticmethod(_convnet.NVMatrix_destroyRandom)
    makeMutex = staticmethod(_convnet.NVMatrix_makeMutex)
NVMatrix.getCellPtr = new_instancemethod(_convnet.NVMatrix_getCellPtr,None,NVMatrix)
NVMatrix.isSameDims = new_instancemethod(_convnet.NVMatrix_isSameDims,None,NVMatrix)
NVMatrix.getNumRows = new_instancemethod(_convnet.NVMatrix_getNumRows,None,NVMatrix)
NVMatrix.getNumCols = new_instancemethod(_convnet.NVMatrix_getNumCols,None,NVMatrix)
NVMatrix.getStride = new_instancemethod(_convnet.NVMatrix_getStride,None,NVMatrix)
NVMatrix.getLeadingDim = new_instancemethod(_convnet.NVMatrix_getLeadingDim,None,NVMatrix)
NVMatrix.getFollowingDim = new_instancemethod(_convnet.NVMatrix_getFollowingDim,None,NVMatrix)
NVMatrix.isTrans = new_instancemethod(_convnet.NVMatrix_isTrans,None,NVMatrix)
NVMatrix.isView = new_instancemethod(_convnet.NVMatrix_isView,None,NVMatrix)
NVMatrix.getDevData = new_instancemethod(_convnet.NVMatrix_getDevData,None,NVMatrix)
NVMatrix.getNumElements = new_instancemethod(_convnet.NVMatrix_getNumElements,None,NVMatrix)
NVMatrix.setTrans = new_instancemethod(_convnet.NVMatrix_setTrans,None,NVMatrix)
NVMatrix.setView = new_instancemethod(_convnet.NVMatrix_setView,None,NVMatrix)
NVMatrix.isContiguous = new_instancemethod(_convnet.NVMatrix_isContiguous,None,NVMatrix)
NVMatrix.truncate = new_instancemethod(_convnet.NVMatrix_truncate,None,NVMatrix)
NVMatrix.copyFromHost = new_instancemethod(_convnet.NVMatrix_copyFromHost,None,NVMatrix)
NVMatrix.copyToHost = new_instancemethod(_convnet.NVMatrix_copyToHost,None,NVMatrix)
NVMatrix.addProduct = new_instancemethod(_convnet.NVMatrix_addProduct,None,NVMatrix)
NVMatrix.rightMult = new_instancemethod(_convnet.NVMatrix_rightMult,None,NVMatrix)
NVMatrix.randomizeUniform = new_instancemethod(_convnet.NVMatrix_randomizeUniform,None,NVMatrix)
NVMatrix.addGaussianNoise = new_instancemethod(_convnet.NVMatrix_addGaussianNoise,None,NVMatrix)
NVMatrix.randomizeGaussian = new_instancemethod(_convnet.NVMatrix_randomizeGaussian,None,NVMatrix)
NVMatrix.binarizeProbs = new_instancemethod(_convnet.NVMatrix_binarizeProbs,None,NVMatrix)
NVMatrix.zero = new_instancemethod(_convnet.NVMatrix_zero,None,NVMatrix)
NVMatrix.biggerThan = new_instancemethod(_convnet.NVMatrix_biggerThan,None,NVMatrix)
NVMatrix.biggerThanVector = new_instancemethod(_convnet.NVMatrix_biggerThanVector,None,NVMatrix)
NVMatrix.equals = new_instancemethod(_convnet.NVMatrix_equals,None,NVMatrix)
NVMatrix._checkBounds = new_instancemethod(_convnet.NVMatrix__checkBounds,None,NVMatrix)
NVMatrix.slice = new_instancemethod(_convnet.NVMatrix_slice,None,NVMatrix)
NVMatrix.sliceRows = new_instancemethod(_convnet.NVMatrix_sliceRows,None,NVMatrix)
NVMatrix.sliceCols = new_instancemethod(_convnet.NVMatrix_sliceCols,None,NVMatrix)
NVMatrix.resize = new_instancemethod(_convnet.NVMatrix_resize,None,NVMatrix)
NVMatrix.reshape = new_instancemethod(_convnet.NVMatrix_reshape,None,NVMatrix)
NVMatrix.reshaped = new_instancemethod(_convnet.NVMatrix_reshaped,None,NVMatrix)
NVMatrix.copy = new_instancemethod(_convnet.NVMatrix_copy,None,NVMatrix)
NVMatrix.add = new_instancemethod(_convnet.NVMatrix_add,None,NVMatrix)
NVMatrix.eltwiseMult = new_instancemethod(_convnet.NVMatrix_eltwiseMult,None,NVMatrix)
NVMatrix.eltwiseDivide = new_instancemethod(_convnet.NVMatrix_eltwiseDivide,None,NVMatrix)
NVMatrix.squaredDiff = new_instancemethod(_convnet.NVMatrix_squaredDiff,None,NVMatrix)
NVMatrix.subtract = new_instancemethod(_convnet.NVMatrix_subtract,None,NVMatrix)
NVMatrix.addVector = new_instancemethod(_convnet.NVMatrix_addVector,None,NVMatrix)
NVMatrix.equalsVector = new_instancemethod(_convnet.NVMatrix_equalsVector,None,NVMatrix)
NVMatrix.eltwiseMultByVector = new_instancemethod(_convnet.NVMatrix_eltwiseMultByVector,None,NVMatrix)
NVMatrix.eltwiseDivideByVector = new_instancemethod(_convnet.NVMatrix_eltwiseDivideByVector,None,NVMatrix)
NVMatrix.tile = new_instancemethod(_convnet.NVMatrix_tile,None,NVMatrix)
NVMatrix.addSum = new_instancemethod(_convnet.NVMatrix_addSum,None,NVMatrix)
NVMatrix.mean = new_instancemethod(_convnet.NVMatrix_mean,None,NVMatrix)
NVMatrix.sum = new_instancemethod(_convnet.NVMatrix_sum,None,NVMatrix)
NVMatrix.max = new_instancemethod(_convnet.NVMatrix_max,None,NVMatrix)
NVMatrix.min = new_instancemethod(_convnet.NVMatrix_min,None,NVMatrix)
NVMatrix.norm2 = new_instancemethod(_convnet.NVMatrix_norm2,None,NVMatrix)
NVMatrix.norm = new_instancemethod(_convnet.NVMatrix_norm,None,NVMatrix)
NVMatrix.inRangeInc = new_instancemethod(_convnet.NVMatrix_inRangeInc,None,NVMatrix)
NVMatrix.inRangeExc = new_instancemethod(_convnet.NVMatrix_inRangeExc,None,NVMatrix)
NVMatrix.biggerThanScalar = new_instancemethod(_convnet.NVMatrix_biggerThanScalar,None,NVMatrix)
NVMatrix.smallerThanScalar = new_instancemethod(_convnet.NVMatrix_smallerThanScalar,None,NVMatrix)
NVMatrix.addScalar = new_instancemethod(_convnet.NVMatrix_addScalar,None,NVMatrix)
NVMatrix.minWithScalar = new_instancemethod(_convnet.NVMatrix_minWithScalar,None,NVMatrix)
NVMatrix.maxWithScalar = new_instancemethod(_convnet.NVMatrix_maxWithScalar,None,NVMatrix)
NVMatrix.pow = new_instancemethod(_convnet.NVMatrix_pow,None,NVMatrix)
NVMatrix.scale = new_instancemethod(_convnet.NVMatrix_scale,None,NVMatrix)
NVMatrix.dotProduct = new_instancemethod(_convnet.NVMatrix_dotProduct,None,NVMatrix)
NVMatrix.getTranspose = new_instancemethod(_convnet.NVMatrix_getTranspose,None,NVMatrix)
NVMatrix.transpose = new_instancemethod(_convnet.NVMatrix_transpose,None,NVMatrix)
NVMatrix.flipTrans = new_instancemethod(_convnet.NVMatrix_flipTrans,None,NVMatrix)
NVMatrix._print = new_instancemethod(_convnet.NVMatrix__print,None,NVMatrix)
NVMatrix.printShape = new_instancemethod(_convnet.NVMatrix_printShape,None,NVMatrix)
NVMatrix_swigregister = _convnet.NVMatrix_swigregister
NVMatrix_swigregister(NVMatrix)
cvar = _convnet.cvar

def NVMatrix_initRandom(*args):
  return _convnet.NVMatrix_initRandom(*args)
NVMatrix_initRandom = _convnet.NVMatrix_initRandom

def NVMatrix_getDeviceID():
  return _convnet.NVMatrix_getDeviceID()
NVMatrix_getDeviceID = _convnet.NVMatrix_getDeviceID

def NVMatrix_isRndInitialized():
  return _convnet.NVMatrix_isRndInitialized()
NVMatrix_isRndInitialized = _convnet.NVMatrix_isRndInitialized

def NVMatrix_getCurandState():
  return _convnet.NVMatrix_getCurandState()
NVMatrix_getCurandState = _convnet.NVMatrix_getCurandState

def NVMatrix_destroyRandom():
  return _convnet.NVMatrix_destroyRandom()
NVMatrix_destroyRandom = _convnet.NVMatrix_destroyRandom

def NVMatrix_makeMutex():
  return _convnet.NVMatrix_makeMutex()
NVMatrix_makeMutex = _convnet.NVMatrix_makeMutex

class ConvNet(Thread):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ConvNet_swiginit(self,_convnet.new_ConvNet(*args))
    __swig_destroy__ = _convnet.delete_ConvNet
ConvNet.getWorkerQueue = new_instancemethod(_convnet.ConvNet_getWorkerQueue,None,ConvNet)
ConvNet.getResultQueue = new_instancemethod(_convnet.ConvNet_getResultQueue,None,ConvNet)
ConvNet.getDataProvider = new_instancemethod(_convnet.ConvNet_getDataProvider,None,ConvNet)
ConvNet.getLayer = new_instancemethod(_convnet.ConvNet_getLayer,None,ConvNet)
ConvNet.copyToCPU = new_instancemethod(_convnet.ConvNet_copyToCPU,None,ConvNet)
ConvNet.copyToGPU = new_instancemethod(_convnet.ConvNet_copyToGPU,None,ConvNet)
ConvNet.updateWeights = new_instancemethod(_convnet.ConvNet_updateWeights,None,ConvNet)
ConvNet.reset = new_instancemethod(_convnet.ConvNet_reset,None,ConvNet)
ConvNet.getNumLayers = new_instancemethod(_convnet.ConvNet_getNumLayers,None,ConvNet)
ConvNet.bprop = new_instancemethod(_convnet.ConvNet_bprop,None,ConvNet)
ConvNet.fprop = new_instancemethod(_convnet.ConvNet_fprop,None,ConvNet)
ConvNet.checkGradient = new_instancemethod(_convnet.ConvNet_checkGradient,None,ConvNet)
ConvNet.checkGradients = new_instancemethod(_convnet.ConvNet_checkGradients,None,ConvNet)
ConvNet.getCost = new_instancemethod(_convnet.ConvNet_getCost,None,ConvNet)
ConvNet.getCostValue = new_instancemethod(_convnet.ConvNet_getCostValue,None,ConvNet)
ConvNet_swigregister = _convnet.ConvNet_swigregister
ConvNet_swigregister(ConvNet)

class Cost(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.Cost_swiginit(self,_convnet.new_Cost(*args))
    __swig_destroy__ = _convnet.delete_Cost
Cost.getCostMap = new_instancemethod(_convnet.Cost_getCostMap,None,Cost)
Cost.getCostCoeffMap = new_instancemethod(_convnet.Cost_getCostCoeffMap,None,Cost)
Cost.getNumCases = new_instancemethod(_convnet.Cost_getNumCases,None,Cost)
Cost.getValue = new_instancemethod(_convnet.Cost_getValue,None,Cost)
Cost.__iadd__ = new_instancemethod(_convnet.Cost___iadd__,None,Cost)
Cost.__idiv__ = new_instancemethod(_convnet.Cost___idiv__,None,Cost)
Cost_swigregister = _convnet.Cost_swigregister
Cost_swigregister(Cost)

class DataProvider(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.DataProvider_swiginit(self,_convnet.new_DataProvider(*args))
    __swig_destroy__ = _convnet.delete_DataProvider
DataProvider.setData = new_instancemethod(_convnet.DataProvider_setData,None,DataProvider)
DataProvider.clearData = new_instancemethod(_convnet.DataProvider_clearData,None,DataProvider)
DataProvider.getMinibatch = new_instancemethod(_convnet.DataProvider_getMinibatch,None,DataProvider)
DataProvider.getDataSlice = new_instancemethod(_convnet.DataProvider_getDataSlice,None,DataProvider)
DataProvider.getNumMinibatches = new_instancemethod(_convnet.DataProvider_getNumMinibatches,None,DataProvider)
DataProvider.getMinibatchSize = new_instancemethod(_convnet.DataProvider_getMinibatchSize,None,DataProvider)
DataProvider.getNumCases = new_instancemethod(_convnet.DataProvider_getNumCases,None,DataProvider)
DataProvider.getNumCasesInMinibatch = new_instancemethod(_convnet.DataProvider_getNumCasesInMinibatch,None,DataProvider)
DataProvider_swigregister = _convnet.DataProvider_swigregister
DataProvider_swigregister(DataProvider)

class Layer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_Layer
Layer.fprop = new_instancemethod(_convnet.Layer_fprop,None,Layer)
Layer.bprop = new_instancemethod(_convnet.Layer_bprop,None,Layer)
Layer.reset = new_instancemethod(_convnet.Layer_reset,None,Layer)
Layer.incRcvdBInputs = new_instancemethod(_convnet.Layer_incRcvdBInputs,None,Layer)
Layer.getRcvdFInputs = new_instancemethod(_convnet.Layer_getRcvdFInputs,None,Layer)
Layer.getRcvdBInputs = new_instancemethod(_convnet.Layer_getRcvdBInputs,None,Layer)
Layer.isGradConsumer = new_instancemethod(_convnet.Layer_isGradConsumer,None,Layer)
Layer.isGradProducer = new_instancemethod(_convnet.Layer_isGradProducer,None,Layer)
Layer.getName = new_instancemethod(_convnet.Layer_getName,None,Layer)
Layer.getType = new_instancemethod(_convnet.Layer_getType,None,Layer)
Layer.addNext = new_instancemethod(_convnet.Layer_addNext,None,Layer)
Layer.addPrev = new_instancemethod(_convnet.Layer_addPrev,None,Layer)
Layer.getPrev = new_instancemethod(_convnet.Layer_getPrev,None,Layer)
Layer.getNext = new_instancemethod(_convnet.Layer_getNext,None,Layer)
Layer.getActs = new_instancemethod(_convnet.Layer_getActs,None,Layer)
Layer.getActsGrad = new_instancemethod(_convnet.Layer_getActsGrad,None,Layer)
Layer.postInit = new_instancemethod(_convnet.Layer_postInit,None,Layer)
Layer.updateWeights = new_instancemethod(_convnet.Layer_updateWeights,None,Layer)
Layer.checkGradients = new_instancemethod(_convnet.Layer_checkGradients,None,Layer)
Layer.copyToCPU = new_instancemethod(_convnet.Layer_copyToCPU,None,Layer)
Layer.copyToGPU = new_instancemethod(_convnet.Layer_copyToGPU,None,Layer)
Layer_swigregister = _convnet.Layer_swigregister
Layer_swigregister(Layer)

class NeuronLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.NeuronLayer_swiginit(self,_convnet.new_NeuronLayer(*args))
    __swig_destroy__ = _convnet.delete_NeuronLayer
NeuronLayer_swigregister = _convnet.NeuronLayer_swigregister
NeuronLayer_swigregister(NeuronLayer)

class WeightLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_WeightLayer
WeightLayer.getWeights = new_instancemethod(_convnet.WeightLayer_getWeights,None,WeightLayer)
WeightLayer_swigregister = _convnet.WeightLayer_swigregister
WeightLayer_swigregister(WeightLayer)

class FCLayer(WeightLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.FCLayer_swiginit(self,_convnet.new_FCLayer(*args))
    __swig_destroy__ = _convnet.delete_FCLayer
FCLayer_swigregister = _convnet.FCLayer_swigregister
FCLayer_swigregister(FCLayer)

class SoftmaxLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.SoftmaxLayer_swiginit(self,_convnet.new_SoftmaxLayer(*args))
    __swig_destroy__ = _convnet.delete_SoftmaxLayer
SoftmaxLayer_swigregister = _convnet.SoftmaxLayer_swigregister
SoftmaxLayer_swigregister(SoftmaxLayer)

class EltwiseSumLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.EltwiseSumLayer_swiginit(self,_convnet.new_EltwiseSumLayer(*args))
    __swig_destroy__ = _convnet.delete_EltwiseSumLayer
EltwiseSumLayer_swigregister = _convnet.EltwiseSumLayer_swigregister
EltwiseSumLayer_swigregister(EltwiseSumLayer)

class EltwiseMaxLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.EltwiseMaxLayer_swiginit(self,_convnet.new_EltwiseMaxLayer(*args))
    __swig_destroy__ = _convnet.delete_EltwiseMaxLayer
EltwiseMaxLayer_swigregister = _convnet.EltwiseMaxLayer_swigregister
EltwiseMaxLayer_swigregister(EltwiseMaxLayer)

class DataLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.DataLayer_swiginit(self,_convnet.new_DataLayer(*args))
    __swig_destroy__ = _convnet.delete_DataLayer
DataLayer.fprop = new_instancemethod(_convnet.DataLayer_fprop,None,DataLayer)
DataLayer_swigregister = _convnet.DataLayer_swigregister
DataLayer_swigregister(DataLayer)

class LocalLayer(WeightLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_LocalLayer
LocalLayer_swigregister = _convnet.LocalLayer_swigregister
LocalLayer_swigregister(LocalLayer)

class ConvLayer(LocalLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ConvLayer_swiginit(self,_convnet.new_ConvLayer(*args))
    __swig_destroy__ = _convnet.delete_ConvLayer
ConvLayer_swigregister = _convnet.ConvLayer_swigregister
ConvLayer_swigregister(ConvLayer)

class LocalUnsharedLayer(LocalLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.LocalUnsharedLayer_swiginit(self,_convnet.new_LocalUnsharedLayer(*args))
    __swig_destroy__ = _convnet.delete_LocalUnsharedLayer
LocalUnsharedLayer_swigregister = _convnet.LocalUnsharedLayer_swigregister
LocalUnsharedLayer_swigregister(LocalUnsharedLayer)

class PoolLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    makePoolLayer = staticmethod(_convnet.PoolLayer_makePoolLayer)
    __swig_destroy__ = _convnet.delete_PoolLayer
PoolLayer_swigregister = _convnet.PoolLayer_swigregister
PoolLayer_swigregister(PoolLayer)

def PoolLayer_makePoolLayer(*args):
  return _convnet.PoolLayer_makePoolLayer(*args)
PoolLayer_makePoolLayer = _convnet.PoolLayer_makePoolLayer

class AvgPoolLayer(PoolLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.AvgPoolLayer_swiginit(self,_convnet.new_AvgPoolLayer(*args))
    __swig_destroy__ = _convnet.delete_AvgPoolLayer
AvgPoolLayer_swigregister = _convnet.AvgPoolLayer_swigregister
AvgPoolLayer_swigregister(AvgPoolLayer)

class MaxPoolLayer(PoolLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.MaxPoolLayer_swiginit(self,_convnet.new_MaxPoolLayer(*args))
    __swig_destroy__ = _convnet.delete_MaxPoolLayer
MaxPoolLayer_swigregister = _convnet.MaxPoolLayer_swigregister
MaxPoolLayer_swigregister(MaxPoolLayer)

class NailbedLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.NailbedLayer_swiginit(self,_convnet.new_NailbedLayer(*args))
    __swig_destroy__ = _convnet.delete_NailbedLayer
NailbedLayer.fpropActs = new_instancemethod(_convnet.NailbedLayer_fpropActs,None,NailbedLayer)
NailbedLayer.bpropActs = new_instancemethod(_convnet.NailbedLayer_bpropActs,None,NailbedLayer)
NailbedLayer_swigregister = _convnet.NailbedLayer_swigregister
NailbedLayer_swigregister(NailbedLayer)

class GaussianBlurLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.GaussianBlurLayer_swiginit(self,_convnet.new_GaussianBlurLayer(*args))
    __swig_destroy__ = _convnet.delete_GaussianBlurLayer
GaussianBlurLayer.fpropActs = new_instancemethod(_convnet.GaussianBlurLayer_fpropActs,None,GaussianBlurLayer)
GaussianBlurLayer.bpropActs = new_instancemethod(_convnet.GaussianBlurLayer_bpropActs,None,GaussianBlurLayer)
GaussianBlurLayer_swigregister = _convnet.GaussianBlurLayer_swigregister
GaussianBlurLayer_swigregister(GaussianBlurLayer)

class ResizeLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ResizeLayer_swiginit(self,_convnet.new_ResizeLayer(*args))
    __swig_destroy__ = _convnet.delete_ResizeLayer
ResizeLayer.fpropActs = new_instancemethod(_convnet.ResizeLayer_fpropActs,None,ResizeLayer)
ResizeLayer.bpropActs = new_instancemethod(_convnet.ResizeLayer_bpropActs,None,ResizeLayer)
ResizeLayer_swigregister = _convnet.ResizeLayer_swigregister
ResizeLayer_swigregister(ResizeLayer)

class RGBToYUVLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.RGBToYUVLayer_swiginit(self,_convnet.new_RGBToYUVLayer(*args))
    __swig_destroy__ = _convnet.delete_RGBToYUVLayer
RGBToYUVLayer.fpropActs = new_instancemethod(_convnet.RGBToYUVLayer_fpropActs,None,RGBToYUVLayer)
RGBToYUVLayer.bpropActs = new_instancemethod(_convnet.RGBToYUVLayer_bpropActs,None,RGBToYUVLayer)
RGBToYUVLayer_swigregister = _convnet.RGBToYUVLayer_swigregister
RGBToYUVLayer_swigregister(RGBToYUVLayer)

class RGBToLABLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.RGBToLABLayer_swiginit(self,_convnet.new_RGBToLABLayer(*args))
    __swig_destroy__ = _convnet.delete_RGBToLABLayer
RGBToLABLayer.fpropActs = new_instancemethod(_convnet.RGBToLABLayer_fpropActs,None,RGBToLABLayer)
RGBToLABLayer.bpropActs = new_instancemethod(_convnet.RGBToLABLayer_bpropActs,None,RGBToLABLayer)
RGBToLABLayer_swigregister = _convnet.RGBToLABLayer_swigregister
RGBToLABLayer_swigregister(RGBToLABLayer)

class ResponseNormLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ResponseNormLayer_swiginit(self,_convnet.new_ResponseNormLayer(*args))
    __swig_destroy__ = _convnet.delete_ResponseNormLayer
ResponseNormLayer_swigregister = _convnet.ResponseNormLayer_swigregister
ResponseNormLayer_swigregister(ResponseNormLayer)

class CrossMapResponseNormLayer(ResponseNormLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.CrossMapResponseNormLayer_swiginit(self,_convnet.new_CrossMapResponseNormLayer(*args))
    __swig_destroy__ = _convnet.delete_CrossMapResponseNormLayer
CrossMapResponseNormLayer_swigregister = _convnet.CrossMapResponseNormLayer_swigregister
CrossMapResponseNormLayer_swigregister(CrossMapResponseNormLayer)

class ContrastNormLayer(ResponseNormLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.ContrastNormLayer_swiginit(self,_convnet.new_ContrastNormLayer(*args))
    __swig_destroy__ = _convnet.delete_ContrastNormLayer
ContrastNormLayer_swigregister = _convnet.ContrastNormLayer_swigregister
ContrastNormLayer_swigregister(ContrastNormLayer)

class CostLayer(Layer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    makeCostLayer = staticmethod(_convnet.CostLayer_makeCostLayer)
    __swig_destroy__ = _convnet.delete_CostLayer
CostLayer.getCost = new_instancemethod(_convnet.CostLayer_getCost,None,CostLayer)
CostLayer.getCoeff = new_instancemethod(_convnet.CostLayer_getCoeff,None,CostLayer)
CostLayer_swigregister = _convnet.CostLayer_swigregister
CostLayer_swigregister(CostLayer)

def CostLayer_makeCostLayer(*args):
  return _convnet.CostLayer_makeCostLayer(*args)
CostLayer_makeCostLayer = _convnet.CostLayer_makeCostLayer

class LogregCostLayer(CostLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.LogregCostLayer_swiginit(self,_convnet.new_LogregCostLayer(*args))
    __swig_destroy__ = _convnet.delete_LogregCostLayer
LogregCostLayer_swigregister = _convnet.LogregCostLayer_swigregister
LogregCostLayer_swigregister(LogregCostLayer)

class SumOfSquaresCostLayer(CostLayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.SumOfSquaresCostLayer_swiginit(self,_convnet.new_SumOfSquaresCostLayer(*args))
    __swig_destroy__ = _convnet.delete_SumOfSquaresCostLayer
SumOfSquaresCostLayer_swigregister = _convnet.SumOfSquaresCostLayer_swigregister
SumOfSquaresCostLayer_swigregister(SumOfSquaresCostLayer)

LOGREG_GRAD_THREADS_X = _convnet.LOGREG_GRAD_THREADS_X
LOGREG_GRAD_THREADS_Y = _convnet.LOGREG_GRAD_THREADS_Y
LOGREG_ERR_THREADS_X = _convnet.LOGREG_ERR_THREADS_X
LOGREG_ERR_THREADS_Y = _convnet.LOGREG_ERR_THREADS_Y

def computeLogregCost(*args):
  return _convnet.computeLogregCost(*args)
computeLogregCost = _convnet.computeLogregCost

def computeLogregGrad(*args):
  return _convnet.computeLogregGrad(*args)
computeLogregGrad = _convnet.computeLogregGrad

def computeSoftmaxGrad(*args):
  return _convnet.computeSoftmaxGrad(*args)
computeSoftmaxGrad = _convnet.computeSoftmaxGrad

def computeLogregSoftmaxGrad(*args):
  return _convnet.computeLogregSoftmaxGrad(*args)
computeLogregSoftmaxGrad = _convnet.computeLogregSoftmaxGrad

def computeEltwiseMaxGrad(*args):
  return _convnet.computeEltwiseMaxGrad(*args)
computeEltwiseMaxGrad = _convnet.computeEltwiseMaxGrad
class Neuron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.Neuron_swiginit(self,_convnet.new_Neuron())
    makeNeuron = staticmethod(_convnet.Neuron_makeNeuron)
    __swig_destroy__ = _convnet.delete_Neuron
Neuron.activate = new_instancemethod(_convnet.Neuron_activate,None,Neuron)
Neuron.computeInputGrad = new_instancemethod(_convnet.Neuron_computeInputGrad,None,Neuron)
Neuron_swigregister = _convnet.Neuron_swigregister
Neuron_swigregister(Neuron)

def Neuron_makeNeuron(*args):
  return _convnet.Neuron_makeNeuron(*args)
Neuron_makeNeuron = _convnet.Neuron_makeNeuron

class LogisticNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.LogisticNeuron_swiginit(self,_convnet.new_LogisticNeuron())
    __swig_destroy__ = _convnet.delete_LogisticNeuron
LogisticNeuron_swigregister = _convnet.LogisticNeuron_swigregister
LogisticNeuron_swigregister(LogisticNeuron)

class ReluNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.ReluNeuron_swiginit(self,_convnet.new_ReluNeuron())
    __swig_destroy__ = _convnet.delete_ReluNeuron
ReluNeuron_swigregister = _convnet.ReluNeuron_swigregister
ReluNeuron_swigregister(ReluNeuron)

class BoundedReluNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.BoundedReluNeuron_swiginit(self,_convnet.new_BoundedReluNeuron(*args))
    __swig_destroy__ = _convnet.delete_BoundedReluNeuron
BoundedReluNeuron_swigregister = _convnet.BoundedReluNeuron_swigregister
BoundedReluNeuron_swigregister(BoundedReluNeuron)

class AbsNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.AbsNeuron_swiginit(self,_convnet.new_AbsNeuron())
    __swig_destroy__ = _convnet.delete_AbsNeuron
AbsNeuron_swigregister = _convnet.AbsNeuron_swigregister
AbsNeuron_swigregister(AbsNeuron)

class TanhNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.TanhNeuron_swiginit(self,_convnet.new_TanhNeuron(*args))
    __swig_destroy__ = _convnet.delete_TanhNeuron
TanhNeuron_swigregister = _convnet.TanhNeuron_swigregister
TanhNeuron_swigregister(TanhNeuron)

class SoftReluNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.SoftReluNeuron_swiginit(self,_convnet.new_SoftReluNeuron())
    __swig_destroy__ = _convnet.delete_SoftReluNeuron
SoftReluNeuron_swigregister = _convnet.SoftReluNeuron_swigregister
SoftReluNeuron_swigregister(SoftReluNeuron)

class SquareNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.SquareNeuron_swiginit(self,_convnet.new_SquareNeuron())
    __swig_destroy__ = _convnet.delete_SquareNeuron
SquareNeuron_swigregister = _convnet.SquareNeuron_swigregister
SquareNeuron_swigregister(SquareNeuron)

class SqrtNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _convnet.SqrtNeuron_swiginit(self,_convnet.new_SqrtNeuron())
    __swig_destroy__ = _convnet.delete_SqrtNeuron
SqrtNeuron_swigregister = _convnet.SqrtNeuron_swigregister
SqrtNeuron_swigregister(SqrtNeuron)

class LinearNeuron(Neuron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.LinearNeuron_swiginit(self,_convnet.new_LinearNeuron(*args))
    __swig_destroy__ = _convnet.delete_LinearNeuron
LinearNeuron_swigregister = _convnet.LinearNeuron_swigregister
LinearNeuron_swigregister(LinearNeuron)

PASS_TRAIN = _convnet.PASS_TRAIN
PASS_TEST = _convnet.PASS_TEST
PASS_GC = _convnet.PASS_GC
GC_SUPPRESS_PASSES = _convnet.GC_SUPPRESS_PASSES
GC_REL_ERR_THRESH = _convnet.GC_REL_ERR_THRESH
MAX_DATA_ON_GPU = _convnet.MAX_DATA_ON_GPU

def getFloatV(*args):
  return _convnet.getFloatV(*args)
getFloatV = _convnet.getFloatV

def getIntV(*args):
  return _convnet.getIntV(*args)
getIntV = _convnet.getIntV

def getMatrixV(*args):
  return _convnet.getMatrixV(*args)
getMatrixV = _convnet.getMatrixV

def getIntA(*args):
  return _convnet.getIntA(*args)
getIntA = _convnet.getIntA

def pyDictGetInt(*args):
  return _convnet.pyDictGetInt(*args)
pyDictGetInt = _convnet.pyDictGetInt

def pyDictGetIntV(*args):
  return _convnet.pyDictGetIntV(*args)
pyDictGetIntV = _convnet.pyDictGetIntV

def pyDictGetString(*args):
  return _convnet.pyDictGetString(*args)
pyDictGetString = _convnet.pyDictGetString

def pyDictGetFloat(*args):
  return _convnet.pyDictGetFloat(*args)
pyDictGetFloat = _convnet.pyDictGetFloat

def pyDictGetFloatV(*args):
  return _convnet.pyDictGetFloatV(*args)
pyDictGetFloatV = _convnet.pyDictGetFloatV

def pyDictGetMatrix(*args):
  return _convnet.pyDictGetMatrix(*args)
pyDictGetMatrix = _convnet.pyDictGetMatrix

def pyDictGetMatrixV(*args):
  return _convnet.pyDictGetMatrixV(*args)
pyDictGetMatrixV = _convnet.pyDictGetMatrixV

def pyDictGetIntA(*args):
  return _convnet.pyDictGetIntA(*args)
pyDictGetIntA = _convnet.pyDictGetIntA
class WeightCombiner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    decay = _swig_property(_convnet.WeightCombiner_decay_get, _convnet.WeightCombiner_decay_set)
    momentum = _swig_property(_convnet.WeightCombiner_momentum_get, _convnet.WeightCombiner_momentum_set)
    learningRate = _swig_property(_convnet.WeightCombiner_learningRate_get, _convnet.WeightCombiner_learningRate_set)
    numGradients = _swig_property(_convnet.WeightCombiner_numGradients_get, _convnet.WeightCombiner_numGradients_set)
    magnitude = _swig_property(_convnet.WeightCombiner_magnitude_get, _convnet.WeightCombiner_magnitude_set)
    incTmp = _swig_property(_convnet.WeightCombiner_incTmp_get, _convnet.WeightCombiner_incTmp_set)
    def __init__(self, *args): 
        _convnet.WeightCombiner_swiginit(self,_convnet.new_WeightCombiner(*args))
    __swig_destroy__ = _convnet.delete_WeightCombiner
WeightCombiner.newGradient = new_instancemethod(_convnet.WeightCombiner_newGradient,None,WeightCombiner)
WeightCombiner.transformGradient = new_instancemethod(_convnet.WeightCombiner_transformGradient,None,WeightCombiner)
WeightCombiner.apply = new_instancemethod(_convnet.WeightCombiner_apply,None,WeightCombiner)
WeightCombiner_swigregister = _convnet.WeightCombiner_swigregister
WeightCombiner_swigregister(WeightCombiner)

class WeightData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sendMutex = _swig_property(_convnet.WeightData_sendMutex_get, _convnet.WeightData_sendMutex_set)
    recvMutex = _swig_property(_convnet.WeightData_recvMutex_get, _convnet.WeightData_recvMutex_set)
    inc = _swig_property(_convnet.WeightData_inc_get, _convnet.WeightData_inc_set)
    incReady = _swig_property(_convnet.WeightData_incReady_get, _convnet.WeightData_incReady_set)
    incCount = _swig_property(_convnet.WeightData_incCount_get, _convnet.WeightData_incCount_set)
    recvTmp = _swig_property(_convnet.WeightData_recvTmp_get, _convnet.WeightData_recvTmp_set)
    outgoing = _swig_property(_convnet.WeightData_outgoing_get, _convnet.WeightData_outgoing_set)
    incoming = _swig_property(_convnet.WeightData_incoming_get, _convnet.WeightData_incoming_set)
    combiner = _swig_property(_convnet.WeightData_combiner_get, _convnet.WeightData_combiner_set)
    id = _swig_property(_convnet.WeightData_id_get, _convnet.WeightData_id_set)
    initialized = _swig_property(_convnet.WeightData_initialized_get, _convnet.WeightData_initialized_set)
    def __init__(self, *args): 
        _convnet.WeightData_swiginit(self,_convnet.new_WeightData(*args))
    __swig_destroy__ = _convnet.delete_WeightData
WeightData.initialize = new_instancemethod(_convnet.WeightData_initialize,None,WeightData)
WeightData.handleRecv = new_instancemethod(_convnet.WeightData_handleRecv,None,WeightData)
WeightData.handleSend = new_instancemethod(_convnet.WeightData_handleSend,None,WeightData)
WeightData_swigregister = _convnet.WeightData_swigregister
WeightData_swigregister(WeightData)

class NetworkManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = staticmethod(_convnet.NetworkManager_get)
    initialize = staticmethod(_convnet.NetworkManager_initialize)
    pauseMPI = staticmethod(_convnet.NetworkManager_pauseMPI)
    resumeMPI = staticmethod(_convnet.NetworkManager_resumeMPI)
    __swig_destroy__ = _convnet.delete_NetworkManager
NetworkManager.sendAndRecv = new_instancemethod(_convnet.NetworkManager_sendAndRecv,None,NetworkManager)
NetworkManager.newId = new_instancemethod(_convnet.NetworkManager_newId,None,NetworkManager)
NetworkManager_swigregister = _convnet.NetworkManager_swigregister
NetworkManager_swigregister(NetworkManager)

def NetworkManager_get():
  return _convnet.NetworkManager_get()
NetworkManager_get = _convnet.NetworkManager_get

def NetworkManager_initialize():
  return _convnet.NetworkManager_initialize()
NetworkManager_initialize = _convnet.NetworkManager_initialize

def NetworkManager_pauseMPI():
  return _convnet.NetworkManager_pauseMPI()
NetworkManager_pauseMPI = _convnet.NetworkManager_pauseMPI

def NetworkManager_resumeMPI():
  return _convnet.NetworkManager_resumeMPI()
NetworkManager_resumeMPI = _convnet.NetworkManager_resumeMPI

class Weights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.Weights_swiginit(self,_convnet.new_Weights(*args))
    __swig_destroy__ = _convnet.delete_Weights
    setAutoCopyToGPU = staticmethod(_convnet.Weights_setAutoCopyToGPU)
Weights.__ref__ = new_instancemethod(_convnet.Weights___ref__,None,Weights)
Weights.getW = new_instancemethod(_convnet.Weights_getW,None,Weights)
Weights.getGrad = new_instancemethod(_convnet.Weights_getGrad,None,Weights)
Weights.getCPUW = new_instancemethod(_convnet.Weights_getCPUW,None,Weights)
Weights.getCPUWInc = new_instancemethod(_convnet.Weights_getCPUWInc,None,Weights)
Weights.getNumRows = new_instancemethod(_convnet.Weights_getNumRows,None,Weights)
Weights.getNumCols = new_instancemethod(_convnet.Weights_getNumCols,None,Weights)
Weights.copyToCPU = new_instancemethod(_convnet.Weights_copyToCPU,None,Weights)
Weights.copyToGPU = new_instancemethod(_convnet.Weights_copyToGPU,None,Weights)
Weights.update = new_instancemethod(_convnet.Weights_update,None,Weights)
Weights.incNumUpdates = new_instancemethod(_convnet.Weights_incNumUpdates,None,Weights)
Weights.getNumUpdates = new_instancemethod(_convnet.Weights_getNumUpdates,None,Weights)
Weights.getEps = new_instancemethod(_convnet.Weights_getEps,None,Weights)
Weights.getMom = new_instancemethod(_convnet.Weights_getMom,None,Weights)
Weights.getWC = new_instancemethod(_convnet.Weights_getWC,None,Weights)
Weights_swigregister = _convnet.Weights_swigregister
Weights_swigregister(Weights)

def Weights_setAutoCopyToGPU(*args):
  return _convnet.Weights_setAutoCopyToGPU(*args)
Weights_setAutoCopyToGPU = _convnet.Weights_setAutoCopyToGPU

class WeightList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_WeightList
    def __init__(self): 
        _convnet.WeightList_swiginit(self,_convnet.new_WeightList())
WeightList.addWeights = new_instancemethod(_convnet.WeightList_addWeights,None,WeightList)
WeightList.update = new_instancemethod(_convnet.WeightList_update,None,WeightList)
WeightList.copyToCPU = new_instancemethod(_convnet.WeightList_copyToCPU,None,WeightList)
WeightList.copyToGPU = new_instancemethod(_convnet.WeightList_copyToGPU,None,WeightList)
WeightList.getSize = new_instancemethod(_convnet.WeightList_getSize,None,WeightList)
WeightList_swigregister = _convnet.WeightList_swigregister
WeightList_swigregister(WeightList)

class WorkResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BATCH_DONE = _convnet.WorkResult_BATCH_DONE
    SYNC_DONE = _convnet.WorkResult_SYNC_DONE
    def __init__(self, *args): 
        _convnet.WorkResult_swiginit(self,_convnet.new_WorkResult(*args))
    __swig_destroy__ = _convnet.delete_WorkResult
WorkResult.getResults = new_instancemethod(_convnet.WorkResult_getResults,None,WorkResult)
WorkResult.getResultType = new_instancemethod(_convnet.WorkResult_getResultType,None,WorkResult)
WorkResult_swigregister = _convnet.WorkResult_swigregister
WorkResult_swigregister(WorkResult)

class Worker(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_Worker
Worker.run = new_instancemethod(_convnet.Worker_run,None,Worker)
Worker_swigregister = _convnet.Worker_swigregister
Worker_swigregister(Worker)

class DataWorker(Worker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convnet.delete_DataWorker
DataWorker_swigregister = _convnet.DataWorker_swigregister
DataWorker_swigregister(DataWorker)

class TrainingWorker(DataWorker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.TrainingWorker_swiginit(self,_convnet.new_TrainingWorker(*args))
    __swig_destroy__ = _convnet.delete_TrainingWorker
TrainingWorker_swigregister = _convnet.TrainingWorker_swigregister
TrainingWorker_swigregister(TrainingWorker)

class SyncWorker(Worker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.SyncWorker_swiginit(self,_convnet.new_SyncWorker(*args))
    __swig_destroy__ = _convnet.delete_SyncWorker
SyncWorker_swigregister = _convnet.SyncWorker_swigregister
SyncWorker_swigregister(SyncWorker)

class GradCheckWorker(DataWorker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.GradCheckWorker_swiginit(self,_convnet.new_GradCheckWorker(*args))
    __swig_destroy__ = _convnet.delete_GradCheckWorker
GradCheckWorker_swigregister = _convnet.GradCheckWorker_swigregister
GradCheckWorker_swigregister(GradCheckWorker)

class MultiviewTestWorker(DataWorker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.MultiviewTestWorker_swiginit(self,_convnet.new_MultiviewTestWorker(*args))
    __swig_destroy__ = _convnet.delete_MultiviewTestWorker
MultiviewTestWorker_swigregister = _convnet.MultiviewTestWorker_swigregister
MultiviewTestWorker_swigregister(MultiviewTestWorker)

class FeatureWorker(DataWorker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _convnet.FeatureWorker_swiginit(self,_convnet.new_FeatureWorker(*args))
    __swig_destroy__ = _convnet.delete_FeatureWorker
FeatureWorker_swigregister = _convnet.FeatureWorker_swigregister
FeatureWorker_swigregister(FeatureWorker)



